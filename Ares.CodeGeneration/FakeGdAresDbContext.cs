// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Ares.CodeGeneration
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeGdAresDbContext : IGdAresDbContext
    {
        public System.Data.Entity.DbSet<Administrator> Administrators { get; set; }
        public System.Data.Entity.DbSet<BalanceType> BalanceTypes { get; set; }
        public System.Data.Entity.DbSet<Customer> Customers { get; set; }
        public System.Data.Entity.DbSet<Employee> Employees { get; set; }
        public System.Data.Entity.DbSet<RoleType> RoleTypes { get; set; }
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; }
        public System.Data.Entity.DbSet<sys_ScriptDeployment> sys_ScriptDeployments { get; set; }
        public System.Data.Entity.DbSet<sys_ScriptDeploymentStatus> sys_ScriptDeploymentStatus { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; }

        public FakeGdAresDbContext()
        {
            Administrators = new FakeDbSet<Administrator>("AdminId");
            BalanceTypes = new FakeDbSet<BalanceType>("BalanceTypeId");
            Customers = new FakeDbSet<Customer>("CustomerId");
            Employees = new FakeDbSet<Employee>("EmployeeId");
            RoleTypes = new FakeDbSet<RoleType>("RoleId");
            sys_DatabaseFirewallRules = new FakeDbSet<sys_DatabaseFirewallRule>("Id", "Name", "StartIpAddress", "EndIpAddress", "CreateDate", "ModifyDate");
            sys_ScriptDeployments = new FakeDbSet<sys_ScriptDeployment>("DeploymentId", "CoordinatorId", "DeploymentName", "DeploymentSubmitted", "Status", "RetryPolicy", "Script");
            sys_ScriptDeploymentStatus = new FakeDbSet<sys_ScriptDeploymentStatus>("DeploymentId", "LogicalServer", "DatabaseName", "Status", "NumRetries");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
            UserRoles = new FakeDbSet<UserRole>("UserId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public int AddNewAdmin(string adminName)
        {
 
            return 0;
        }

        public int AddNewCustomer(string customerName, int? discountRating, byte[] discountPicture)
        {
 
            return 0;
        }

        public int AddNewEmployee(int? employeeId, string employeeName, int? balance)
        {
 
            return 0;
        }

        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
 
            return 0;
        }

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
 
            return 0;
        }

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
 
            return 0;
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpHelpdiagramdefinition(diagramname, ownerId, out procResult));
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpHelpdiagramsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpHelpdiagrams(diagramname, ownerId, out procResult));
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
 
            return 0;
        }

        public int SpUpgraddiagrams()
        {
 
            return 0;
        }

        public System.Collections.Generic.List<Test1ReturnModel> Test1()
        {
            int procResult;
            return Test1(out procResult);
        }

        public System.Collections.Generic.List<Test1ReturnModel> Test1(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<Test1ReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<Test1ReturnModel>> Test1Async()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Test1(out procResult));
        }

    }
}
// </auto-generated>
